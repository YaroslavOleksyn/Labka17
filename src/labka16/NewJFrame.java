/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package labka16;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.HashSet;
import java.util.Locale;
import java.util.Set;

/**
 *
 * @author Admin
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    private Connection connection;

    public NewJFrame() {
        initComponents();
        try {
            this.connection = conn();
            model1 = (DefaultTableModel) TablePlayer.getModel();
            model2 = (DefaultTableModel) TablePlayer2.getModel();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Помилка підключення: " + e.getMessage());
        }
        Next.setEnabled(false);
        Back.setEnabled(false);
        Next2.setEnabled(false);
        Back1.setEnabled(false);
        Task.setEnabled(false);
        jButton3.setEnabled(false);
        jButton6.setEnabled(false);
        jButton2.setEnabled(false);
    }
    private DefaultTableModel model1;
    private DefaultTableModel model2;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TablePlayer = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        Back = new javax.swing.JButton();
        Next = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablePlayer2 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        Back1 = new javax.swing.JButton();
        Next2 = new javax.swing.JButton();
        Back2 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        Task = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TablePlayer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nickname", "Name", "Year", "K/D", "Role"
            }
        ));
        jScrollPane1.setViewportView(TablePlayer);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Таблиця гравців команди");

        jButton1.setText("Додати з бази даних");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Зберегти в базу даних");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Очистити таблицю");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        Back.setText("Назад");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        Next.setText("Далі");
        Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextActionPerformed(evt);
            }
        });

        TablePlayer2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nickname", "Name", "Year", "K/D", "Role"
            }
        ));
        jScrollPane2.setViewportView(TablePlayer2);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel2.setText("Таюлиця статистики після матчу");

        Back1.setText("Назад");
        Back1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back1ActionPerformed(evt);
            }
        });

        Next2.setText("Далі");
        Next2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Next2ActionPerformed(evt);
            }
        });

        Back2.setText("Додати з бази даних");
        Back2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Back2ActionPerformed(evt);
            }
        });

        jButton6.setText("Очистити таблицю");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        Task.setText("Розрахувати ");
        Task.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TaskActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(Back)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(Next))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(98, 98, 98))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Back2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Back1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(Next2))
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(86, 86, 86)
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(89, 89, 89))))
                        .addGap(42, 42, 42))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addComponent(Task, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Next, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Back1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Next2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Back2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Task, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        saveDataToDatabase(TablePlayer);
        jButton1.setEnabled(true);
    }//GEN-LAST:event_jButton2ActionPerformed
    boolean base1 = false;
    boolean base2 = false;
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        loadDataFromDatabase();
        Next.setEnabled(true);
        Back.setEnabled(true);
        base1 = true;
        checkTaskButton();
        jButton3.setEnabled(true);
        jButton2.setEnabled(true);
        jButton1.setEnabled(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        clearTable();
        Next.setEnabled(false);
        Back.setEnabled(false);
        Task.setEnabled(false);
        jButton3.setEnabled(false);
        jButton2.setEnabled(false);
        jButton1.setEnabled(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        if (currentPageIndex > 0) {
            currentPageIndex--;
            loadDataFromDatabase();
        }
    }//GEN-LAST:event_BackActionPerformed

    private void NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextActionPerformed
        // TODO add your handling code here:
        currentPageIndex++;
        loadDataFromDatabase();
    }//GEN-LAST:event_NextActionPerformed

    private void Back1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Back1ActionPerformed

    private void Next2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Next2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Next2ActionPerformed

    private void Back2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Back2ActionPerformed
        // TODO add your handling code here:
        try {
            String query = "SELECT * FROM cs2match LIMIT ?, ?";
            int offset = currentPageIndex * ROWS_PER_PAGE;

            boolean hasNextPage = false;
            try (PreparedStatement checkStatement = connection.prepareStatement(query)) {
                checkStatement.setInt(1, offset + ROWS_PER_PAGE);
                checkStatement.setInt(2, 1);
                try (ResultSet checkResultSet = checkStatement.executeQuery()) {
                    hasNextPage = checkResultSet.next();
                }
            }

            if (!hasNextPage) {
                Next2.setEnabled(false);
            } else {
                Next2.setEnabled(true);
            }

            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setInt(1, offset);
                statement.setInt(2, ROWS_PER_PAGE);
                try (ResultSet rs = statement.executeQuery()) {
                    model2.setRowCount(0);

                    while (rs.next()) {
                        String nickname = rs.getString("Nickname");
                        String name = rs.getString("Name");
                        String year = rs.getString("Year");
                        String kd = rs.getString("K/D");
                        String role = rs.getString("Role");
                        if (playerExistsInFirstTable(nickname, name, year, role)) {
                            model2.addRow(new Object[]{nickname, name, year, kd, role});
                        } else {
                            JOptionPane.showMessageDialog(null, "Гравця немає в другій таблиці.");
                        }
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Помилка при завантаженні даних з бази даних: " + e.getMessage());
        }
        Next2.setEnabled(true);
        Back1.setEnabled(true);
        base2 = true;
        checkTaskButton();
        jButton6.setEnabled(true);
    }//GEN-LAST:event_Back2ActionPerformed
    private boolean playerExistsInFirstTable(String nickname, String name, String year, String role) {
        int rowCount = model1.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String tableNickname = model1.getValueAt(i, 0).toString();
            String tableName = model1.getValueAt(i, 1).toString();
            String tableYear = model1.getValueAt(i, 2).toString();
            String tableRole = model1.getValueAt(i, 4).toString();
            if (nickname.equals(tableNickname) && name.equals(tableName) && year.equals(tableYear) && role.equals(tableRole)) {
                return true;
            }
        }
        return false;
    }
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        model2.setRowCount(0);
        Next2.setEnabled(false);
        Back1.setEnabled(false);
        jButton6.setEnabled(false);
    }//GEN-LAST:event_jButton6ActionPerformed
    private void checkTaskButton() {
        if (base1 && base2 && model1.getRowCount() == model2.getRowCount()) {
            Task.setEnabled(true);
        } else {
            Task.setEnabled(false);
        }
    }

    private void TaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TaskActionPerformed
        // TODO add your handling code here:
        calculate();
        model2.setRowCount(0);
        Task.setEnabled(false);
    }//GEN-LAST:event_TaskActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });

    }

    private final int ROWS_PER_PAGE = 10;
    private int currentPageIndex = 0;

    private void loadDataFromDatabase() {
        try {
            String query = "SELECT * FROM teamnavi LIMIT ?, ?";
            int offset = currentPageIndex * ROWS_PER_PAGE;

            boolean hasNextPage = false;
            try (PreparedStatement checkStatement = connection.prepareStatement(query)) {
                checkStatement.setInt(1, offset + ROWS_PER_PAGE);
                checkStatement.setInt(2, 1);
                try (ResultSet checkResultSet = checkStatement.executeQuery()) {
                    hasNextPage = checkResultSet.next();
                }
            }

            if (!hasNextPage) {
                Next.setEnabled(false);
            } else {
                Next.setEnabled(true);
            }

            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setInt(1, offset);
                statement.setInt(2, ROWS_PER_PAGE);
                try (ResultSet rs = statement.executeQuery()) {
                    model1.setRowCount(0);

                    Set<String> uniquePlayers = new HashSet<>();

                    while (rs.next()) {
                        String nickname = rs.getString("Nickname");
                        String name = rs.getString("Name");
                        String playerKey = nickname + "|" + name;
                        if (!uniquePlayers.contains(playerKey)) {
                            String year = rs.getString("Year");
                            String kd = rs.getString("K/D");
                            String role = rs.getString("Role");
                            model1.addRow(new Object[]{nickname, name, year, kd, role});
                            uniquePlayers.add(playerKey);
                        }
                    }
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Помилка при завантаженні даних з бази даних: " + e.getMessage());
        }
    }

    private void saveDataToDatabase(JTable table) {
        try {
            Set<String> nameSet = new HashSet<>();
            int rowCount = table.getRowCount();
            for (int i = 0; i < rowCount; i++) {
                String name = table.getValueAt(i, 1).toString();
                if (nameSet.contains(name)) {
                    JOptionPane.showMessageDialog(null, "Дублікат імені: " + name + ". Додавання пропущено.");
                    return;
                }
                nameSet.add(name);
            }

            String deleteQuery = "DELETE FROM teamnavi";
            try (PreparedStatement deleteStatement = connection.prepareStatement(deleteQuery)) {
                deleteStatement.executeUpdate();
            }

            String insertQuery = "INSERT INTO teamnavi (Nickname, Name, Year, `K/D`, Role) VALUES (?, ?, ?, ?, ?)";
            try (PreparedStatement insertStatement = connection.prepareStatement(insertQuery)) {
                for (int i = 0; i < rowCount; i++) {
                    String nickname = table.getValueAt(i, 0).toString();
                    String name = table.getValueAt(i, 1).toString();
                    String year = table.getValueAt(i, 2).toString();
                    String kd = table.getValueAt(i, 3).toString();
                    String role = table.getValueAt(i, 4).toString();

                    insertStatement.setString(1, nickname);
                    insertStatement.setString(2, name);
                    insertStatement.setString(3, year);
                    insertStatement.setString(4, kd);
                    insertStatement.setString(5, role);
                    insertStatement.executeUpdate();
                }
            }

            JOptionPane.showMessageDialog(null, "Дані успішно збережено в базу даних.");

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Помилка при збереженні даних в базу даних: " + e.getMessage());
        }
    }

    DecimalFormat decimalFormat = new DecimalFormat("#.##", DecimalFormatSymbols.getInstance(Locale.US));

    private void calculate() {
        int rowCount1 = model1.getRowCount();

        for (int i = 0; i < rowCount1; i++) {
            String name1 = model1.getValueAt(i, 1).toString();

            for (int j = 0; j < model2.getRowCount(); j++) {
                String name2 = model2.getValueAt(j, 1).toString();
                if (name1.equals(name2)) {
                    String kdValue1 = model1.getValueAt(i, 3).toString();
                    String kdValue2 = model2.getValueAt(j, 3).toString();

                    double kd1 = Double.parseDouble(kdValue1);
                    double kd2 = Double.parseDouble(kdValue2);
                    double averageKD = (kd1 + kd2) / 2;
                    String formattedKD = decimalFormat.format(averageKD);
                    model1.setValueAt(formattedKD, i, 3);
                    break;
                }
            }
        }
    }

    private void clearTable() {
        model1.setRowCount(0);
    }

    public static Connection conn() throws SQLException {
        try {
            String url = "jdbc:mysql://localhost:3306/lab16";
            String user = "admin";
            String password = "1234";
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection(url, user, password);
            return conn;
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JButton Back1;
    private javax.swing.JButton Back2;
    private javax.swing.JButton Next;
    private javax.swing.JButton Next2;
    private javax.swing.JTable TablePlayer;
    private javax.swing.JTable TablePlayer2;
    private javax.swing.JButton Task;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
